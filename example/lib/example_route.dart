// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************

import 'package:ff_annotation_route/ff_annotation_route.dart';
import 'package:flutter/widgets.dart';
import 'common/data/tu_chong_source.dart';
import 'common/model/pic_swiper_item.dart';
import 'common/widget/pic_swiper.dart';
import 'pages/complex/image_editor_demo.dart';
import 'pages/complex/photo_view_demo.dart';
import 'pages/complex/waterfall_flow_demo.dart';
import 'pages/main_page.dart';
import 'pages/simple/custom_image_demo.dart';
import 'pages/simple/image_demo.dart';
import 'pages/simple/image_editor_demo.dart';
import 'pages/simple/loading_progress.dart';
import 'pages/simple/paint_image_demo.dart';
import 'pages/simple/photo_view_demo.dart';
import 'pages/simple/slide_page_demo.dart';
import 'pages/simple/zoom_image_demo.dart';

RouteResult getRouteResult({String name, Map<String, dynamic> arguments}) {
  arguments = arguments ?? const <String, dynamic>{};
  switch (name) {
    case 'fluttercandies://WaterfallFlowDemo':
      return RouteResult(
        name: name,
        widget: WaterfallFlowDemo(),
        routeName: 'WaterfallFlow',
        description: 'WaterfallFlow with ExtendedImage.',
        exts: <String, dynamic>{'group': 'Complex', 'order': 0},
      );
    case 'fluttercandies://customimage':
      return RouteResult(
        name: name,
        widget: CustomImageDemo(),
        routeName: 'Custom load state',
        description: 'Custom state for loading, failed and completed.',
        exts: <String, dynamic>{'group': 'Simple', 'order': 1},
      );
    case 'fluttercandies://demogrouppage':
      return RouteResult(
        name: name,
        widget: DemoGroupPage(
          keyValue:
              arguments['keyValue'] as MapEntry<String, List<DemoRouteResult>>,
        ),
        routeName: 'DemoGroupPage',
      );
    case 'fluttercandies://extendedImageGesturePageView':
      return RouteResult(
        name: name,
        widget: SimplePhotoViewDemo(),
        showStatusBar: false,
        routeName: 'ExtendedImageGesturePageView',
        description: 'Simple demo for ExtendedImageGesturePageView.',
        exts: <String, dynamic>{'group': 'Simple', 'order': 7},
      );
    case 'fluttercandies://image':
      return RouteResult(
        name: name,
        widget: ImageDemo(),
        routeName: 'Image',
        description: 'Cached image with border,shape,borderRadius.',
        exts: <String, dynamic>{'group': 'Simple', 'order': 0},
      );
    case 'fluttercandies://imageeditor':
      return RouteResult(
        name: name,
        widget: ImageEditorDemo(),
        routeName: 'ImageEditor',
        description: 'Crop,rotate and flip with image editor.',
        exts: <String, dynamic>{'group': 'Complex', 'order': 1},
      );
    case 'fluttercandies://loadingprogress':
      return RouteResult(
        name: name,
        widget: LoadingProgress(),
        routeName: 'Loading progress',
        description: 'Loading progress for network image.',
        exts: <String, dynamic>{'group': 'Simple', 'order': 2},
      );
    case 'fluttercandies://mainpage':
      return RouteResult(
        name: name,
        widget: MainPage(),
        routeName: 'MainPage',
      );
    case 'fluttercandies://paintimage':
      return RouteResult(
        name: name,
        widget: PaintImageDemo(),
        routeName: 'Paint image',
        description: 'Paint any thing before or after raw image is painted.',
        exts: <String, dynamic>{'group': 'Simple', 'order': 3},
      );
    case 'fluttercandies://photoview':
      return RouteResult(
        name: name,
        widget: PhotoViewDemo(),
        routeName: 'PhotoView',
        description: 'Complex demo for photo view.',
        exts: <String, dynamic>{'group': 'Complex', 'order': 2},
      );
    case 'fluttercandies://picswiper':
      return RouteResult(
        name: name,
        widget: PicSwiper(
          index: arguments['index'] as int,
          pics: arguments['pics'] as List<PicSwiperItem>,
          tuChongItem: arguments['tuChongItem'] as TuChongItem,
        ),
        showStatusBar: false,
        routeName: 'PicSwiper',
        pageRouteType: PageRouteType.transparent,
      );
    case 'fluttercandies://simpleimageeditor':
      return RouteResult(
        name: name,
        widget: SimpleImageEditor(),
        routeName: 'ImageEditor',
        description: 'Crop with image editor.',
        exts: <String, dynamic>{'group': 'Simple', 'order': 6},
      );
    case 'fluttercandies://slidepage':
      return RouteResult(
        name: name,
        widget: SlidePageDemo(),
        routeName: 'SlidePage',
        description: 'Simple demo for.',
        exts: <String, dynamic>{'group': 'Simple', 'order': 5},
      );
    case 'fluttercandies://slidepageitem':
      return RouteResult(
        name: name,
        widget: SlidePage(
          url: arguments['url'] as String,
        ),
        routeName: 'SlidePageItem',
        pageRouteType: PageRouteType.transparent,
        description: 'Simple demo for Sliding.',
      );
    case 'fluttercandies://zoomimage':
      return RouteResult(
        name: name,
        widget: ZoomImageDemo(),
        routeName: 'ImageZoom',
        description: 'Zoom and Pan.',
        exts: <String, dynamic>{'group': 'Simple', 'order': 4},
      );
    default:
      return const RouteResult(name: 'flutterCandies://notfound');
  }
}

class RouteResult {
  const RouteResult({
    @required this.name,
    this.widget,
    this.showStatusBar = true,
    this.routeName = '',
    this.pageRouteType,
    this.description = '',
    this.exts,
  });

  /// The name of the route (e.g., "/settings").
  ///
  /// If null, the route is anonymous.
  final String name;

  /// The Widget return base on route
  final Widget widget;

  /// Whether show this route with status bar.
  final bool showStatusBar;

  /// The route name to track page
  final String routeName;

  /// The type of page route
  final PageRouteType pageRouteType;

  /// The description of route
  final String description;

  /// The extend arguments
  final Map<String, dynamic> exts;
}
